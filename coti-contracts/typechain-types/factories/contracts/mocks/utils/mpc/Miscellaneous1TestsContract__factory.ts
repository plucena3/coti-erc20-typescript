/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Miscellaneous1TestsContract,
  Miscellaneous1TestsContractInterface,
} from "../../../../../contracts/mocks/utils/mpc/Miscellaneous1TestsContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "bool",
        name: "a",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "b",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "bit",
        type: "bool",
      },
    ],
    name: "booleanTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64[10]",
        name: "randoms",
        type: "uint64[10]",
      },
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "numBits",
        type: "uint8",
      },
    ],
    name: "checkBound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBooleanResults",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRandom",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRandomBounded",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getValidateCiphertextResult",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "isBounded",
        type: "bool",
      },
      {
        internalType: "uint8",
        name: "numBits",
        type: "uint8",
      },
    ],
    name: "randTest_",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "numBits",
        type: "uint8",
      },
    ],
    name: "randomBoundedTest",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "randomTest",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "ctUint8",
        name: "ct8",
        type: "uint256",
      },
      {
        internalType: "ctUint16",
        name: "ct16",
        type: "uint256",
      },
      {
        internalType: "ctUint32",
        name: "ct32",
        type: "uint256",
      },
      {
        internalType: "ctUint64",
        name: "ct64",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateCiphertextTest",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600080546001600160801b031916905534801561002057600080fd5b50611a1f806100306000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80639266057811610076578063d3d8aff41161005b578063d3d8aff414610284578063dbc221d0146102a2578063dfbba08f146102b557600080fd5b8063926605781461025d578063aacc5a171461027257600080fd5b806334c7c817116100a757806334c7c81714610202578063598f9579146102295780635adb57781461025557600080fd5b8063103bdb87146100c3578063276b8288146101dd575b600080fd5b6000546040805160ff70010000000000000000000000000000000084048116151582527101000000000000000000000000000000000084048116151560208301527201000000000000000000000000000000000000840481161515928201929092527301000000000000000000000000000000000000008304821615156060820152740100000000000000000000000000000000000000008304821615156080820152750100000000000000000000000000000000000000000083048216151560a082015276010000000000000000000000000000000000000000000083048216151560c08201527701000000000000000000000000000000000000000000000090920416151560e0820152610100015b60405180910390f35b6101f06101eb366004611675565b6102c8565b60405160ff90911681526020016101d4565b6000547801000000000000000000000000000000000000000000000000900460ff166101f0565b61023c610237366004611723565b610731565b60405167ffffffffffffffff90911681526020016101d4565b61023c610744565b61027061026b36600461174e565b610756565b005b60005467ffffffffffffffff1661023c565b60005468010000000000000000900467ffffffffffffffff1661023c565b6102706102b03660046117d8565b610a39565b61023c6102c336600461186c565b610b11565b60006102e7604051806040016040528060008152602001606081525090565b878152604080516020601f860181900481028201810190925284815290859085908190840183828082843760009201829052506020808701959095526040805180820190915290815260609481019490945250610342915050565b878152604080516020601f87018190048102820181019092528581529086908690819084018382808284376000920182905250602080870195909552604080518082019091529081526060948101949094525061039d915050565b878152604080516020601f8801819004810282018101909252868152908790879081908401838280828437600092018290525060208087019590955260408051808201909152908152606094810194909452506103f8915050565b878152604080516020601f8901819004810282018101909252878152908890889081908401838280828437600092019190915250505050602082015261044561044085610ef5565b610f89565b6000805460ff929092167801000000000000000000000000000000000000000000000000027fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff9092169190911781556104a56104a085610fe3565b610ff3565b6000549091507801000000000000000000000000000000000000000000000000900460ff1661ffff821614610561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f76616c696461746543697068657274657874546573743a2076616c696461746560448201527f4369706865727465787420776974682031362062697473206661696c6564000060648201526084015b60405180910390fd5b600061057461056f85611003565b611013565b6000549091507801000000000000000000000000000000000000000000000000900460ff1663ffffffff82161461062d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f76616c696461746543697068657274657874546573743a2076616c696461746560448201527f4369706865727465787420776974682033322062697473206661696c656400006064820152608401610558565b600061064061063b85611023565b611033565b6000549091507801000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff8216146106fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f76616c696461746543697068657274657874546573743a2076616c696461746560448201527f4369706865727465787420776974682036342062697473206661696c656400006064820152608401610558565b50506000547801000000000000000000000000000000000000000000000000900460ff169c9b505050505050505050505050565b600061073e600183610b11565b92915050565b6000610751600080610b11565b905090565b600061076184611043565b9050600061076e84611043565b9050600061077b84611043565b905061078f61078a84846110e7565b611180565b60008054911515700100000000000000000000000000000000027fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff9092169190911790556107e061078a8484611211565b6000805491151571010000000000000000000000000000000000027fffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffff90921691909117905561083261078a8484611225565b600080549115157201000000000000000000000000000000000000027fffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffff90921691909117905561088461078a84611239565b60008054911515730100000000000000000000000000000000000000027fffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffff9092169190911790556108d861078a8484611248565b6000805491151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90921691909117905561092d61078a848461125c565b600080549115157501000000000000000000000000000000000000000000027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff90921691909117905561098461078a828585611270565b60008054911515760100000000000000000000000000000000000000000000027fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff9092169190911781556109d78461133c565b90506109e561078a8261134b565b6000805491151577010000000000000000000000000000000000000000000000027fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff90921691909117905550505050505050565b60005b82811015610b0b57600160ff83161b8482600a8110610a5d57610a5d61189f565b602002015167ffffffffffffffff1610610af9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f72616e646f6d546573743a2072616e646f6d206661696c65642c206f7574206f60448201527f6620626f756e64730000000000000000000000000000000000000000000000006064820152608401610558565b80610b03816118ce565b915050610a3c565b50505050565b6000600a610b1d611656565b84610b715760005b82811015610b6657610b3861078a61135a565b8282600a8110610b4a57610b4a61189f565b9115156020909202015280610b5e816118ce565b915050610b25565b50610b7181836113ef565b610b79611656565b85610b8357600a92505b60005b83811015610c145786610bcc57610b9e6104406114d4565b60ff168282600a8110610bb357610bb361189f565b67ffffffffffffffff9092166020929092020152610c02565b610bd8610440876114e4565b60ff168282600a8110610bed57610bed61189f565b67ffffffffffffffff90921660209290920201525b80610c0c816118ce565b915050610b86565b508515610c2657610c26818487610a39565b610c308184611541565b85610c3a57600392505b60005b83811015610ccd5786610c8457610c556104a0611599565b61ffff168282600a8110610c6b57610c6b61189f565b67ffffffffffffffff9092166020929092020152610cbb565b610c906104a0876115a9565b61ffff168282600a8110610ca657610ca661189f565b67ffffffffffffffff90921660209290920201525b80610cc5816118ce565b915050610c3d565b508515610cdf57610cdf818487610a39565b610ce98184611541565b85610cf357600392505b60005b83811015610d8a5786610d3f57610d0e61056f6115b9565b63ffffffff168282600a8110610d2657610d2661189f565b67ffffffffffffffff9092166020929092020152610d78565b610d4b61056f876115c9565b63ffffffff168282600a8110610d6357610d6361189f565b67ffffffffffffffff90921660209290920201525b80610d82816118ce565b915050610cf6565b508515610d9c57610d9c818487610a39565b610da68184611541565b85610db057600292505b60005b83811015610e3b5786610df657610dcb61063b6115d9565b8282600a8110610ddd57610ddd61189f565b67ffffffffffffffff9092166020929092020152610e29565b610e0261063b876115e9565b8282600a8110610e1457610e1461189f565b67ffffffffffffffff90921660209290920201525b80610e33816118ce565b915050610db3565b508515610e9957610e4d818487610a39565b80516000805467ffffffffffffffff90921668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff909216919091179055610ed4565b8051600080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9092169190911790555b610ede8184611541565b505060005467ffffffffffffffff16949350505050565b6000606463e4f36e1060015b845160208601516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152610f469360f81b92919060040161195c565b6020604051808303816000875af1158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073e91906119f9565b60006064630cfed56160015b60f81b846040518363ffffffff1660e01b8152600401610f469291907fff00000000000000000000000000000000000000000000000000000000000000929092168252602082015260400190565b6000606463e4f36e106002610f01565b60006064630cfed5616002610f95565b6000606463e4f36e106003610f01565b60006064630cfed5616003610f95565b6000606463e4f36e106004610f01565b60006064630cfed5616004610f95565b60008082611052576000611055565b60015b6040517fd9b60b600000000000000000000000000000000000000000000000000000000081526000600482015260ff9190911660248201819052915060649063d9b60b60906044016020604051808303816000875af11580156110bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e091906119f9565b9392505050565b6000606463fe9c73d16110fb8380806115f9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681527fffffff0000000000000000000000000000000000000000000000000000000000909116600482015260248101869052604481018590526064016020604051808303816000875af11580156110bc573d6000803e3d6000fd5b6040517f0cfed56100000000000000000000000000000000000000000000000000000000815260006004820181905260248201839052908190606490630cfed561906044016020604051808303816000875af11580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120891906119f9565b15159392505050565b6000606463fb7da35f6110fb8380806115f9565b60006064636f962e2c6110fb8380806115f9565b60006064631d79e49a82610f95565b60006064637c12a1eb6110fb8380806115f9565b600060646342094c566110fb8380806115f9565b600060646320cc408d6112848380806115f9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681527fffffff000000000000000000000000000000000000000000000000000000000090911660048201526024810187905260448101869052606481018590526084016020604051808303816000875af1158015611310573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133491906119f9565b949350505050565b6000606463c50c9c0282610f95565b6000606463d2c135e582610f95565b6000606463134eb890825b60f81b6040518263ffffffff1660e01b81526004016113ac91907fff0000000000000000000000000000000000000000000000000000000000000091909116815260200190565b6020604051808303816000875af11580156113cb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075191906119f9565b6001805b8281101561143f578381600a811061140d5761140d61189f565b602002015184519015159015150361142d5781611429816118ce565b9250505b80611437816118ce565b9150506113f3565b508181036114cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f72616e646f6d546573743a2072616e646f6d206661696c65642c20616c6c207660448201527f616c75657320617265207468652073616d6500000000000000000000000000006064820152608401610558565b505050565b6000606463134eb8906001611365565b6000606463072d17fc60015b60f81b846040518363ffffffff1660e01b8152600401610f469291907fff0000000000000000000000000000000000000000000000000000000000000092909216825260ff16602082015260400190565b6001805b8281101561143f578381600a811061155f5761155f61189f565b6020020151845167ffffffffffffffff9182169116036115875781611583816118ce565b9250505b80611591816118ce565b915050611545565b6000606463134eb8906002611365565b6000606463072d17fc60026114f0565b6000606463134eb8906003611365565b6000606463072d17fc60036114f0565b6000606463134eb8906004611365565b6000606463072d17fc60046114f0565b600081600281111561160d5761160d61192d565b60ff1660088460048111156116245761162461192d565b61ffff16901b61ffff1660108660048111156116425761164261192d565b62ffffff16901b171760e81b949350505050565b604051806101400160405280600a906020820280368337509192915050565b60008060008060008060a0878903121561168e57600080fd5b86359550602087013594506040870135935060608701359250608087013567ffffffffffffffff808211156116c257600080fd5b818901915089601f8301126116d657600080fd5b8135818111156116e557600080fd5b8a60208285010111156116f757600080fd5b6020830194508093505050509295509295509295565b803560ff8116811461171e57600080fd5b919050565b60006020828403121561173557600080fd5b6110e08261170d565b8035801515811461171e57600080fd5b60008060006060848603121561176357600080fd5b61176c8461173e565b925061177a6020850161173e565b91506117886040850161173e565b90509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b803567ffffffffffffffff8116811461171e57600080fd5b600080600061018084860312156117ee57600080fd5b84601f8501126117fd57600080fd5b60405161014080820182811067ffffffffffffffff8211171561182257611822611791565b6040528501818782111561183557600080fd5b865b8281101561185657611848816117c0565b825260209182019101611837565b509194503592506117889050610160850161170d565b6000806040838503121561187f57600080fd5b6118888361173e565b91506118966020840161170d565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611926577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7fff000000000000000000000000000000000000000000000000000000000000008416815260006020848184015260606040840152835180606085015260005b818110156119b85785810183015185820160800152820161199c565b5060006080828601015260807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010192505050949350505050565b600060208284031215611a0b57600080fd5b505191905056fea164736f6c6343000813000a";

type Miscellaneous1TestsContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Miscellaneous1TestsContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Miscellaneous1TestsContract__factory extends ContractFactory {
  constructor(...args: Miscellaneous1TestsContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Miscellaneous1TestsContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): Miscellaneous1TestsContract__factory {
    return super.connect(runner) as Miscellaneous1TestsContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Miscellaneous1TestsContractInterface {
    return new Interface(_abi) as Miscellaneous1TestsContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Miscellaneous1TestsContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as Miscellaneous1TestsContract;
  }
}
