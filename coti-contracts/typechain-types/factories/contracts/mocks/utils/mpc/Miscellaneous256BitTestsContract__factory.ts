/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Miscellaneous256BitTestsContract,
  Miscellaneous256BitTestsContractInterface,
} from "../../../../../contracts/mocks/utils/mpc/Miscellaneous256BitTestsContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "a2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "allowance2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "b2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "ctNumbers2",
    outputs: [
      {
        components: [
          {
            internalType: "ctUint64",
            name: "high",
            type: "uint256",
          },
          {
            internalType: "ctUint64",
            name: "low",
            type: "uint256",
          },
        ],
        internalType: "struct ctUint128",
        name: "high",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "ctUint64",
            name: "high",
            type: "uint256",
          },
          {
            internalType: "ctUint64",
            name: "low",
            type: "uint256",
          },
        ],
        internalType: "struct ctUint128",
        name: "low",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "numbers2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "a_",
        type: "uint256[]",
      },
    ],
    name: "offBoardToUserTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8[]",
        name: "numBits",
        type: "uint8[]",
      },
    ],
    name: "randBoundedBitsTest2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "randTest2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "a_",
        type: "uint256[]",
      },
    ],
    name: "setPublicTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "success",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "a_",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "b_",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amount_",
        type: "uint256[]",
      },
    ],
    name: "transferTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "a_",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "b_",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amount_",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "allowance_",
        type: "uint256[]",
      },
    ],
    name: "transferWithAllowanceTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "ctUint64",
                    name: "high",
                    type: "uint256",
                  },
                  {
                    internalType: "ctUint64",
                    name: "low",
                    type: "uint256",
                  },
                ],
                internalType: "struct ctUint128",
                name: "high",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "ctUint64",
                    name: "high",
                    type: "uint256",
                  },
                  {
                    internalType: "ctUint64",
                    name: "low",
                    type: "uint256",
                  },
                ],
                internalType: "struct ctUint128",
                name: "low",
                type: "tuple",
              },
            ],
            internalType: "struct ctUint256",
            name: "ciphertext",
            type: "tuple",
          },
          {
            internalType: "bytes[2][2]",
            name: "signature",
            type: "bytes[2][2]",
          },
        ],
        internalType: "struct itUint256[]",
        name: "a_",
        type: "tuple[]",
      },
    ],
    name: "validateCiphertextTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type Miscellaneous256BitTestsContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Miscellaneous256BitTestsContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Miscellaneous256BitTestsContract__factory extends ContractFactory {
  constructor(...args: Miscellaneous256BitTestsContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Miscellaneous256BitTestsContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): Miscellaneous256BitTestsContract__factory {
    return super.connect(runner) as Miscellaneous256BitTestsContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Miscellaneous256BitTestsContractInterface {
    return new Interface(_abi) as Miscellaneous256BitTestsContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Miscellaneous256BitTestsContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as Miscellaneous256BitTestsContract;
  }
}
