/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Bitwise128BitTestsContract,
  Bitwise128BitTestsContractInterface,
} from "../../../../../contracts/mocks/utils/mpc/Bitwise128BitTestsContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint128[]",
        name: "a",
        type: "uint128[]",
      },
      {
        internalType: "uint128[]",
        name: "b",
        type: "uint128[]",
      },
    ],
    name: "andTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "numbers",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128[]",
        name: "a",
        type: "uint128[]",
      },
      {
        internalType: "uint128[]",
        name: "b",
        type: "uint128[]",
      },
    ],
    name: "orTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128[]",
        name: "a",
        type: "uint128[]",
      },
      {
        internalType: "uint8[]",
        name: "b",
        type: "uint8[]",
      },
    ],
    name: "shlTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128[]",
        name: "a",
        type: "uint128[]",
      },
      {
        internalType: "uint8[]",
        name: "b",
        type: "uint8[]",
      },
    ],
    name: "shrTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128[]",
        name: "a",
        type: "uint128[]",
      },
      {
        internalType: "uint128[]",
        name: "b",
        type: "uint128[]",
      },
    ],
    name: "xorTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611859806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063d39fa23311610050578063d39fa233146100b2578063e7725688146100ea578063f1b2fa09146100fd57600080fd5b80630f5740d514610077578063bb4e492a1461008c578063d3340fee1461009f575b600080fd5b61008a61008536600461164c565b610110565b005b61008a61009a36600461164c565b610392565b61008a6100ad36600461164c565b6104cb565b6100c56100c03660046116b8565b610604565b6040516fffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61008a6100f836600461164c565b61064a565b61008a61010b36600461164c565b6108a1565b82811461017e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e707574206c656e677468206d69736d61746368000000000000000000000060448201526064015b60405180910390fd5b61018783610af8565b60005b8381101561038b5760006101c38686848181106101a9576101a96116d1565b90506020020160208101906101be9190611700565b610b7d565b905060006101dc8585858181106101a9576101a96116d1565b90506101f06101eb8383610bd7565b610c2f565b60008481548110610203576102036116d1565b90600052602060002090600291828204019190066010026101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506102816101eb888886818110610266576102666116d1565b905060200201602081019061027b9190611700565b83610c88565b6fffffffffffffffffffffffffffffffff16600084815481106102a6576102a66116d1565b6000918252602090912060028204015460019091166010026101000a90046fffffffffffffffffffffffffffffffff16146102e3576102e3611732565b6103166101eb838787878181106102fc576102fc6116d1565b90506020020160208101906103119190611700565b610cf3565b6fffffffffffffffffffffffffffffffff166000848154811061033b5761033b6116d1565b6000918252602090912060028204015460019091166010026101000a90046fffffffffffffffffffffffffffffffff161461037857610378611732565b50508061038490611790565b905061018a565b5050505050565b8281146103fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e707574206c656e677468206d69736d6174636800000000000000000000006044820152606401610175565b61040483610af8565b60005b8381101561038b5760006104268686848181106101a9576101a96116d1565b905061045b6101eb82868686818110610441576104416116d1565b905060200201602081019061045691906117c8565b610d51565b6000838154811061046e5761046e6116d1565b90600052602060002090600291828204019190066010026101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050806104c490611790565b9050610407565b828114610534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e707574206c656e677468206d69736d6174636800000000000000000000006044820152606401610175565b61053d83610af8565b60005b8381101561038b57600061055f8686848181106101a9576101a96116d1565b90506105946101eb8286868681811061057a5761057a6116d1565b905060200201602081019061058f91906117c8565b610e6a565b600083815481106105a7576105a76116d1565b90600052602060002090600291828204019190066010026101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050806105fd90611790565b9050610540565b6000818154811061061457600080fd5b9060005260206000209060029182820401919006601002915054906101000a90046fffffffffffffffffffffffffffffffff1681565b8281146106b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e707574206c656e677468206d69736d6174636800000000000000000000006044820152606401610175565b6106bc83610af8565b60005b8381101561038b5760006106de8686848181106101a9576101a96116d1565b905060006106f78585858181106101a9576101a96116d1565b90506107066101eb8383610f4c565b60008481548110610719576107196116d1565b90600052602060002090600291828204019190066010026101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506107976101eb88888681811061077c5761077c6116d1565b90506020020160208101906107919190611700565b83610f99565b6fffffffffffffffffffffffffffffffff16600084815481106107bc576107bc6116d1565b6000918252602090912060028204015460019091166010026101000a90046fffffffffffffffffffffffffffffffff16146107f9576107f9611732565b61082c6101eb83878787818110610812576108126116d1565b90506020020160208101906108279190611700565b610ff8565b6fffffffffffffffffffffffffffffffff1660008481548110610851576108516116d1565b6000918252602090912060028204015460019091166010026101000a90046fffffffffffffffffffffffffffffffff161461088e5761088e611732565b50508061089a90611790565b90506106bf565b82811461090a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e707574206c656e677468206d69736d6174636800000000000000000000006044820152606401610175565b61091383610af8565b60005b8381101561038b5760006109358686848181106101a9576101a96116d1565b9050600061094e8585858181106101a9576101a96116d1565b905061095d6101eb8383611056565b60008481548110610970576109706116d1565b90600052602060002090600291828204019190066010026101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506109ee6101eb8888868181106109d3576109d36116d1565b90506020020160208101906109e89190611700565b836110a3565b6fffffffffffffffffffffffffffffffff1660008481548110610a1357610a136116d1565b6000918252602090912060028204015460019091166010026101000a90046fffffffffffffffffffffffffffffffff1614610a5057610a50611732565b610a836101eb83878787818110610a6957610a696116d1565b9050602002016020810190610a7e9190611700565b611102565b6fffffffffffffffffffffffffffffffff1660008481548110610aa857610aa86116d1565b6000918252602090912060028204015460019091166010026101000a90046fffffffffffffffffffffffffffffffff1614610ae557610ae5611732565b505080610af190611790565b9050610916565b610b036000806115bf565b60005b81811015610b795760008054600180820183559180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56360028204018054929091166010026101000a6fffffffffffffffffffffffffffffffff0219909116905580610b7181611790565b915050610b06565b5050565b604080518082019091526000808252602082015260408051808201909152600080825260208201528267ffffffffffffffff604082901c16610bbe81611160565b8352610bc982611160565b602084015250909392505050565b60408051808201909152600080825260208201526040805180820190915260008082526020820152610c118460200151846020015161120f565b602082015283518351610c24919061120f565b815290505b92915050565b600080610c3f83600001516112ce565b90506000610c5084602001516112ce565b90508067ffffffffffffffff1660408367ffffffffffffffff166fffffffffffffffffffffffffffffffff16901b1792505050919050565b60408051808201909152600080825260208201526040805180820190915260008082526020820152600080604086901c67ffffffffffffffff168691509150610cd5818660200151611335565b60208401528451610ce7908390611335565b83525090949350505050565b60408051808201909152600080825260208201526040805180820190915260008082526020820152600080604085901c67ffffffffffffffff168591509150610d408660200151826113bf565b60208401528551610ce790836113bf565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260408360ff1610610dc2578351610d909084611449565b50610d9b6000611160565b602080830191909152840151610dbb90610db66040866117eb565b611449565b8152610e63565b60ff831615610e5457602084015167ffffffffffffffff60ff85161c90610df390610ded90836114cd565b85611449565b6020830152610e038460406117eb565b60ff1667ffffffffffffffff8016901b9050610e4c610e26866000015186611449565b610e47610e378860200151856114cd565b610e428860406117eb565b6114e3565b61120f565b825250610e63565b60208085015190820152835181525b9392505050565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260408360ff1610610ecc57610eab8460200151846114e3565b508351610ebd90610e426040866117eb565b6020820152610dbb6000611160565b60ff831615610e54576000610ee28460406117eb565b60ff1667ffffffffffffffff8016901c9050610f21610f058660200151866114e3565b610e47610f168860000151856114cd565b610db68860406117eb565b602083015250835167ffffffffffffffff60ff85161b90610e4c90610f4690836114cd565b856114e3565b60408051808201909152600080825260208201526040805180820190915260008082526020820152610f86846020015184602001516114fa565b602082015283518351610c2491906114fa565b60408051808201909152600080825260208201526040805180820190915260008082526020820152600080604086901c67ffffffffffffffff168691509150610fe681866020015161150f565b60208401528451610ce790839061150f565b60408051808201909152600080825260208201526040805180820190915260008082526020820152600080604085901c67ffffffffffffffff1685915091506110458660200151826114cd565b60208401528551610ce790836114cd565b6040805180820190915260008082526020820152604080518082019091526000808252602082015261109084602001518460200151611525565b602082015283518351610c249190611525565b60408051808201909152600080825260208201526040805180820190915260008082526020820152600080604086901c67ffffffffffffffff1686915091506110f081866020015161153a565b60208401528451610ce790839061153a565b60408051808201909152600080825260208201526040805180820190915260008082526020820152600080604085901c67ffffffffffffffff16859150915061114f866020015182611550565b60208401528551610ce79083611550565b6040517fd9b60b600000000000000000000000000000000000000000000000000000000081527f0400000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff8216602482015260009060649063d9b60b60906044015b6020604051808303816000875af11580156111eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c299190611833565b6000606463fb7da35f61122460048085611562565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681527fffffff0000000000000000000000000000000000000000000000000000000000909116600482015260248101869052604481018590526064015b6020604051808303816000875af11580156112aa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e639190611833565b6040517f0cfed5610000000000000000000000000000000000000000000000000000000081527f0400000000000000000000000000000000000000000000000000000000000000600482015260248101829052600090606490630cfed561906044016111cc565b6000606463fb7da35f61134b6004806001611562565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681527fffffff0000000000000000000000000000000000000000000000000000000000909116600482015267ffffffffffffffff861660248201526044810185905260640161128b565b6000606463fb7da35f6113d56004806002611562565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681527fffffff000000000000000000000000000000000000000000000000000000000090911660048201526024810186905267ffffffffffffffff8516604482015260640161128b565b60006064631135f71a611460600460016002611562565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681527fffffff000000000000000000000000000000000000000000000000000000000090911660048201526024810186905260ff8516604482015260640161128b565b6000606463fe9c73d16113d56004806002611562565b600060646339bd1d8d611460600460016002611562565b6000606463fe9c73d161122460048085611562565b6000606463fe9c73d161134b6004806001611562565b60006064636f962e2c61122460048085611562565b60006064636f962e2c61134b6004806001611562565b60006064636f962e2c6113d560048060025b600081600281111561157657611576611804565b60ff16600884600481111561158d5761158d611804565b61ffff16901b61ffff1660108660048111156115ab576115ab611804565b62ffffff16901b171760e81b949350505050565b5080546000825560010160029004906000526020600020908101906115e491906115e7565b50565b5b808211156115fc57600081556001016115e8565b5090565b60008083601f84011261161257600080fd5b50813567ffffffffffffffff81111561162a57600080fd5b6020830191508360208260051b850101111561164557600080fd5b9250929050565b6000806000806040858703121561166257600080fd5b843567ffffffffffffffff8082111561167a57600080fd5b61168688838901611600565b9096509450602087013591508082111561169f57600080fd5b506116ac87828801611600565b95989497509550505050565b6000602082840312156116ca57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561171257600080fd5b81356fffffffffffffffffffffffffffffffff81168114610e6357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036117c1576117c1611761565b5060010190565b6000602082840312156117da57600080fd5b813560ff81168114610e6357600080fd5b60ff8281168282160390811115610c2957610c29611761565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561184557600080fd5b505191905056fea164736f6c6343000813000a";

type Bitwise128BitTestsContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Bitwise128BitTestsContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bitwise128BitTestsContract__factory extends ContractFactory {
  constructor(...args: Bitwise128BitTestsContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Bitwise128BitTestsContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): Bitwise128BitTestsContract__factory {
    return super.connect(runner) as Bitwise128BitTestsContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Bitwise128BitTestsContractInterface {
    return new Interface(_abi) as Bitwise128BitTestsContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Bitwise128BitTestsContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as Bitwise128BitTestsContract;
  }
}
