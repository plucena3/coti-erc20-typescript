/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  OffboardToUserKeyTestContract,
  OffboardToUserKeyTestContractInterface,
} from "../../../../../contracts/mocks/utils/mpc/OffboardToUserKeyTestContract";

const _abi = [
  {
    inputs: [],
    name: "getCTs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCt",
    outputs: [
      {
        internalType: "ctUint8",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOnboardOffboardResult",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUserKeyShares",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "signedEK",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getUserKeyTest",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getX",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "offboardCombinedTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a8",
        type: "uint8",
      },
      {
        internalType: "uint16",
        name: "a16",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "a32",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "a64",
        type: "uint32",
      },
    ],
    name: "offboardOnboardTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "offboardToUserTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "signedEK",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "userKeyTest",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061196e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80635197c7aa11610076578063b30fc30d1161005b578063b30fc30d14610172578063fbe5fe1c14610185578063fbffef771461019857600080fd5b80635197c7aa1461015257806368af56131461015d57600080fd5b80633d36856a116100a75780633d36856a146100fa5780633e99ee8c146101135780634e7b55c31461014a57600080fd5b80630844066e146100c357806320ee9bfb146100d9575b600080fd5b6003546040519081526020015b60405180910390f35b6100ec6100e73660046112ff565b6101ab565b6040516100d09291906113d9565b60095460ff165b60405160ff90911681526020016100d0565b600454600554600654600754600854604080519586526020860194909452928401919091526060830152608082015260a0016100d0565b6100ec610302565b60025460ff16610101565b61017061016b366004611441565b610429565b005b610170610180366004611488565b6104e9565b6101016101933660046114e5565b6106f8565b6101706101a6366004611441565b6107b0565b6060806101ba86868686610863565b60008060016101c98482611637565b506101d690508382611637565b505050600060018180546101e990611595565b80601f016020809104026020016040519081016040528092919081815260200182805461021590611595565b80156102625780601f1061023757610100808354040283529160200191610262565b820191906000526020600020905b81548152906001019060200180831161024557829003601f168201915b5050505050915080805461027590611595565b80601f01602080910402602001604051908101604052809291908181526020018280546102a190611595565b80156102ee5780601f106102c3576101008083540402835291602001916102ee565b820191906000526020600020905b8154815290600101906020018083116102d157829003601f168201915b505050505090509150915094509492505050565b6060806000600181805461031590611595565b80601f016020809104026020016040519081016040528092919081815260200182805461034190611595565b801561038e5780601f106103635761010080835404028352916020019161038e565b820191906000526020600020905b81548152906001019060200180831161037157829003601f168201915b505050505091508080546103a190611595565b80601f01602080910402602001604051908101604052809291908181526020018280546103cd90611595565b801561041a5780601f106103ef5761010080835404028352916020019161041a565b820191906000526020600020905b8154815290600101906020018083116103fd57829003601f168201915b50505050509050915091509091565b600061043a60008460ff1611610bda565b9050600061044784610c7f565b905060006104578560ff16610d2d565b905060006104678660ff16610d97565b905060006104778760ff16610e03565b905060006104858688610e73565b905060006104938689610ea7565b905060006104a1868a610ed0565b905060006104af868b610ef9565b905060006104bd868c610f22565b602095860151600455938501516005555090830151600655820151600755015160085550505050505050565b60ff8416151560006104fa82610bda565b9050600061050787610c7f565b9050600061051487610d2d565b9050600061052187610d97565b905060006105348763ffffffff16610e03565b9050600061054186610f4b565b9050600061055661055183610fa4565b610fb3565b9050600061056387611044565b9050600061057861057383611054565b611064565b600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff8316179055905060006105b288611074565b905060006105c76105c283611084565b611094565b905060006105d4896110a4565b905060006105e96105e4836110b4565b6110c4565b905060006105f68a6110d4565b9050600061060b610606836110e4565b6110f4565b90508f151589151514801561062657508461ffff168760ff16145b801561063a57508263ffffffff168760ff16145b801561065257508067ffffffffffffffff168760ff16145b6106e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4661696c656420746f206f6666626f61726420616e64206f6e626f617264206160448201527f6c6c2076616c7565730000000000000000000000000000000000000000000000606482015260840160405180910390fd5b5050505050505050505050505050505050505050565b6000806107056005610c7f565b90506000610714826005611104565b905061072288888888610863565b60008060016107318482611637565b5061073e90508382611637565b50505061074b81856111a1565b600355600061075982611044565b9050600061076682611054565b905061077181611064565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff9290921691821790559a9950505050505050505050565b60006107c160008460ff1611610bda565b905060006107ce84610c7f565b905060006107de8560ff16610d2d565b905060006107ee8660ff16610d97565b905060006107fe8760ff16610e03565b9050600061080c868861121a565b9050600061081a86896111a1565b90506000610828868a611229565b90506000610836868b611239565b90506000610844868c611249565b6004959095555060059290925560065560075560085550505050505050565b60608060006108728685611780565b67ffffffffffffffff81111561088a5761088a611566565b6040519080825280601f01601f1916602001820160405280156108b4576020820181803683370190505b50905060005b84811015610931578585828181106108d4576108d4611793565b9050013560f81c60f81b8282815181106108f0576108f0611793565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080610929816117c2565b9150506108ba565b5060005b868110156109d35787878281811061094f5761094f611793565b909101357fff00000000000000000000000000000000000000000000000000000000000000169050826109828388611780565b8151811061099257610992611793565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806109cb816117c2565b915050610935565b506040517fa85f0ca200000000000000000000000000000000000000000000000000000000815260009060649063a85f0ca290610a149085906004016117fa565b6000604051808303816000875af1158015610a33573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a79919081019061180d565b604080516101008082526101208201909252919250600091906020820181803683375050604080516101008082526101208201909252929350600092915060208201818036833701905050905060005b8251811015610b4257838181518110610ae457610ae4611793565b602001015160f81c60f81b838281518110610b0157610b01611793565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080610b3a816117c2565b915050610ac9565b5060005b8151811015610bca5783610b5c61010083611780565b81518110610b6c57610b6c611793565b602001015160f81c60f81b828281518110610b8957610b89611793565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080610bc2816117c2565b915050610b46565b5090999098509650505050505050565b60008082610be9576000610bec565b60015b6040517fd9b60b600000000000000000000000000000000000000000000000000000000081526000600482015260ff9190911660248201819052915060649063d9b60b60906044015b6020604051808303816000875af1158015610c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c789190611907565b9392505050565b6040517fd9b60b600000000000000000000000000000000000000000000000000000000081527f0100000000000000000000000000000000000000000000000000000000000000600482015260ff8216602482015260009060649063d9b60b60906044015b6020604051808303816000875af1158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d279190611907565b92915050565b6040517fd9b60b600000000000000000000000000000000000000000000000000000000081527f0200000000000000000000000000000000000000000000000000000000000000600482015261ffff8216602482015260009060649063d9b60b6090604401610ce4565b6040517fd9b60b600000000000000000000000000000000000000000000000000000000081527f0300000000000000000000000000000000000000000000000000000000000000600482015263ffffffff8216602482015260009060649063d9b60b6090604401610ce4565b6040517fd9b60b600000000000000000000000000000000000000000000000000000000081527f0400000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff8216602482015260009060649063d9b60b6090604401610ce4565b6040805180820190915260008082526020820152610e9083610f4b565b8152610e9c838361121a565b602082015292915050565b6040805180820190915260008082526020820152610ec483611044565b8152610e9c83836111a1565b6040805180820190915260008082526020820152610eed83611074565b8152610e9c8383611229565b6040805180820190915260008082526020820152610f16836110a4565b8152610e9c8383611239565b6040805180820190915260008082526020820152610f3f836110d4565b8152610e9c8383611249565b6000606463c50c9c02825b60f81b846040518363ffffffff1660e01b8152600401610ce49291907fff00000000000000000000000000000000000000000000000000000000000000929092168252602082015260400190565b6000606463d2c135e582610f56565b6040517f0cfed56100000000000000000000000000000000000000000000000000000000815260006004820181905260248201839052908190606490630cfed561906044016020604051808303816000875af1158015611017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103b9190611907565b15159392505050565b6000606463c50c9c026001610f56565b6000606463d2c135e56001610f56565b60006064630cfed5616001610f56565b6000606463c50c9c026002610f56565b6000606463d2c135e56002610f56565b60006064630cfed5616002610f56565b6000606463c50c9c026003610f56565b6000606463d2c135e56003610f56565b60006064630cfed5616003610f56565b6000606463c50c9c026004610f56565b6000606463d2c135e56004610f56565b60006064630cfed5616004610f56565b60006064638c5d015061111a6001806002611259565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681527fffffff000000000000000000000000000000000000000000000000000000000090911660048201526024810186905260ff851660448201526064016020604051808303816000875af1158015610c54573d6000803e3d6000fd5b60006064633c6f0e6860015b60f81b85856040516020016111ed919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610c3593929190611920565b60006064633c6f0e68826111ad565b60006064633c6f0e6860026111ad565b60006064633c6f0e6860036111ad565b60006064633c6f0e6860046111ad565b600081600281111561126d5761126d6118d8565b60ff166008846004811115611284576112846118d8565b61ffff16901b61ffff1660108660048111156112a2576112a26118d8565b62ffffff16901b171760e81b949350505050565b60008083601f8401126112c857600080fd5b50813567ffffffffffffffff8111156112e057600080fd5b6020830191508360208285010111156112f857600080fd5b9250929050565b6000806000806040858703121561131557600080fd5b843567ffffffffffffffff8082111561132d57600080fd5b611339888389016112b6565b9096509450602087013591508082111561135257600080fd5b5061135f878288016112b6565b95989497509550505050565b60005b8381101561138657818101518382015260200161136e565b50506000910152565b600081518084526113a781602086016020860161136b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6040815260006113ec604083018561138f565b82810360208401526113fe818561138f565b95945050505050565b803560ff8116811461141857600080fd5b919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461141857600080fd5b6000806040838503121561145457600080fd5b61145d83611407565b915061146b6020840161141d565b90509250929050565b803563ffffffff8116811461141857600080fd5b6000806000806080858703121561149e57600080fd5b6114a785611407565b9350602085013561ffff811681146114be57600080fd5b92506114cc60408601611474565b91506114da60608601611474565b905092959194509250565b6000806000806000606086880312156114fd57600080fd5b853567ffffffffffffffff8082111561151557600080fd5b61152189838a016112b6565b9097509550602088013591508082111561153a57600080fd5b50611547888289016112b6565b909450925061155a90506040870161141d565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c908216806115a957607f821691505b6020821081036115e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561163257600081815260208120601f850160051c8101602086101561160f5750805b601f850160051c820191505b8181101561162e5782815560010161161b565b5050505b505050565b815167ffffffffffffffff81111561165157611651611566565b6116658161165f8454611595565b846115e8565b602080601f8311600181146116b857600084156116825750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561162e565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015611705578886015182559484019460019091019084016116e6565b508582101561174157878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610d2757610d27611751565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036117f3576117f3611751565b5060010190565b602081526000610c78602083018461138f565b60006020828403121561181f57600080fd5b815167ffffffffffffffff8082111561183757600080fd5b818401915084601f83011261184b57600080fd5b81518181111561185d5761185d611566565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156118a3576118a3611566565b816040528281528760208487010111156118bc57600080fd5b6118cd83602083016020880161136b565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561191957600080fd5b5051919050565b7fff00000000000000000000000000000000000000000000000000000000000000841681528260208201526060604082015260006113fe606083018461138f56fea164736f6c6343000813000a";

type OffboardToUserKeyTestContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OffboardToUserKeyTestContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OffboardToUserKeyTestContract__factory extends ContractFactory {
  constructor(...args: OffboardToUserKeyTestContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OffboardToUserKeyTestContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): OffboardToUserKeyTestContract__factory {
    return super.connect(runner) as OffboardToUserKeyTestContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OffboardToUserKeyTestContractInterface {
    return new Interface(_abi) as OffboardToUserKeyTestContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): OffboardToUserKeyTestContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as OffboardToUserKeyTestContract;
  }
}
