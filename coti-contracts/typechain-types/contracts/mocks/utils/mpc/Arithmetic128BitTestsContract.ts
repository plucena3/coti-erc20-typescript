/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface Arithmetic128BitTestsContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTest"
      | "checkedAddTest"
      | "checkedAddWithOverflowBitTest"
      | "checkedMulTest"
      | "checkedMulWithOverflowBitTest"
      | "checkedSubTest"
      | "checkedSubWithOverflowBitTest"
      | "mulTest"
      | "numbers"
      | "numbersLHS"
      | "numbersRHS"
      | "overflows"
      | "overflowsLHS"
      | "overflowsRHS"
      | "subTest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkedAddTest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkedAddWithOverflowBitTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkedMulTest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkedMulWithOverflowBitTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkedSubTest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkedSubWithOverflowBitTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mulTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "numbers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numbersLHS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numbersRHS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "overflows",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "overflowsLHS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "overflowsRHS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "addTest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkedAddTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkedAddWithOverflowBitTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkedMulTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkedMulWithOverflowBitTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkedSubTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkedSubWithOverflowBitTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mulTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numbers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numbersLHS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numbersRHS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "overflows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "overflowsLHS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overflowsRHS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subTest", data: BytesLike): Result;
}

export interface Arithmetic128BitTestsContract extends BaseContract {
  connect(runner?: ContractRunner | null): Arithmetic128BitTestsContract;
  waitForDeployment(): Promise<this>;

  interface: Arithmetic128BitTestsContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  checkedAddTest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkedAddWithOverflowBitTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  checkedMulTest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkedMulWithOverflowBitTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  checkedSubTest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkedSubWithOverflowBitTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  mulTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  numbers: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  numbersLHS: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  numbersRHS: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  overflows: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  overflowsLHS: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  overflowsRHS: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  subTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkedAddTest"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkedAddWithOverflowBitTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkedMulTest"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkedMulWithOverflowBitTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkedSubTest"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkedSubWithOverflowBitTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mulTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "numbers"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "numbersLHS"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "numbersRHS"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "overflows"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "overflowsLHS"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "overflowsRHS"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "subTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  filters: {};
}
