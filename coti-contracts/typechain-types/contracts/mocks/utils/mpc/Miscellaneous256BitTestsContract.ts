/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type CtUint128Struct = { high: BigNumberish; low: BigNumberish };

export type CtUint128StructOutput = [high: bigint, low: bigint] & {
  high: bigint;
  low: bigint;
};

export type CtUint256Struct = { high: CtUint128Struct; low: CtUint128Struct };

export type CtUint256StructOutput = [
  high: CtUint128StructOutput,
  low: CtUint128StructOutput
] & { high: CtUint128StructOutput; low: CtUint128StructOutput };

export type ItUint256Struct = {
  ciphertext: CtUint256Struct;
  signature: [[BytesLike, BytesLike], [BytesLike, BytesLike]];
};

export type ItUint256StructOutput = [
  ciphertext: CtUint256StructOutput,
  signature: [[string, string], [string, string]]
] & {
  ciphertext: CtUint256StructOutput;
  signature: [[string, string], [string, string]];
};

export interface Miscellaneous256BitTestsContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "a2"
      | "allowance2"
      | "b2"
      | "ctNumbers2"
      | "numbers2"
      | "offBoardToUserTest"
      | "randBoundedBitsTest2"
      | "randTest2"
      | "setPublicTest"
      | "success"
      | "transferTest"
      | "transferWithAllowanceTest"
      | "validateCiphertextTest"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "a2", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "allowance2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "b2", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "ctNumbers2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numbers2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offBoardToUserTest",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "randBoundedBitsTest2",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "randTest2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicTest",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "success",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTest",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithAllowanceTest",
    values: [BigNumberish[], BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "validateCiphertextTest",
    values: [ItUint256Struct[]]
  ): string;

  decodeFunctionResult(functionFragment: "a2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "b2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ctNumbers2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numbers2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offBoardToUserTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randBoundedBitsTest2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "randTest2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPublicTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "success", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWithAllowanceTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateCiphertextTest",
    data: BytesLike
  ): Result;
}

export interface Miscellaneous256BitTestsContract extends BaseContract {
  connect(runner?: ContractRunner | null): Miscellaneous256BitTestsContract;
  waitForDeployment(): Promise<this>;

  interface: Miscellaneous256BitTestsContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  a2: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  allowance2: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  b2: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  ctNumbers2: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [CtUint128StructOutput, CtUint128StructOutput] & {
        high: CtUint128StructOutput;
        low: CtUint128StructOutput;
      }
    ],
    "view"
  >;

  numbers2: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  offBoardToUserTest: TypedContractMethod<
    [a_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  randBoundedBitsTest2: TypedContractMethod<
    [numBits: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  randTest2: TypedContractMethod<[length: BigNumberish], [void], "nonpayable">;

  setPublicTest: TypedContractMethod<
    [a_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  success: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  transferTest: TypedContractMethod<
    [a_: BigNumberish[], b_: BigNumberish[], amount_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  transferWithAllowanceTest: TypedContractMethod<
    [
      a_: BigNumberish[],
      b_: BigNumberish[],
      amount_: BigNumberish[],
      allowance_: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  validateCiphertextTest: TypedContractMethod<
    [a_: ItUint256Struct[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "a2"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance2"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "b2"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "ctNumbers2"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [CtUint128StructOutput, CtUint128StructOutput] & {
        high: CtUint128StructOutput;
        low: CtUint128StructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "numbers2"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "offBoardToUserTest"
  ): TypedContractMethod<[a_: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "randBoundedBitsTest2"
  ): TypedContractMethod<[numBits: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "randTest2"
  ): TypedContractMethod<[length: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPublicTest"
  ): TypedContractMethod<[a_: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "success"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferTest"
  ): TypedContractMethod<
    [a_: BigNumberish[], b_: BigNumberish[], amount_: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferWithAllowanceTest"
  ): TypedContractMethod<
    [
      a_: BigNumberish[],
      b_: BigNumberish[],
      amount_: BigNumberish[],
      allowance_: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateCiphertextTest"
  ): TypedContractMethod<[a_: ItUint256Struct[]], [void], "nonpayable">;

  filters: {};
}
