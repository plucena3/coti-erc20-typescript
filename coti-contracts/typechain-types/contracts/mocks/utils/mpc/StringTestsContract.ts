/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type CtStringStruct = { value: BigNumberish[] };

export type CtStringStructOutput = [value: bigint[]] & { value: bigint[] };

export type ItStringStruct = {
  ciphertext: CtStringStruct;
  signature: BytesLike[];
};

export type ItStringStructOutput = [
  ciphertext: CtStringStructOutput,
  signature: string[]
] & { ciphertext: CtStringStructOutput; signature: string[] };

export interface StringTestsContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decryptNetworkEncryptedString"
      | "getUserEncryptedString"
      | "isEqual"
      | "plaintext"
      | "setIsEqual"
      | "setNetworkEncryptedString"
      | "setPublicString"
      | "setUserEncryptedString"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decryptNetworkEncryptedString",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEncryptedString",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isEqual", values?: undefined): string;
  encodeFunctionData(functionFragment: "plaintext", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setIsEqual",
    values: [ItStringStruct, ItStringStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setNetworkEncryptedString",
    values: [ItStringStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserEncryptedString",
    values: [ItStringStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "decryptNetworkEncryptedString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEncryptedString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEqual", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plaintext", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setIsEqual", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNetworkEncryptedString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserEncryptedString",
    data: BytesLike
  ): Result;
}

export interface StringTestsContract extends BaseContract {
  connect(runner?: ContractRunner | null): StringTestsContract;
  waitForDeployment(): Promise<this>;

  interface: StringTestsContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decryptNetworkEncryptedString: TypedContractMethod<[], [void], "nonpayable">;

  getUserEncryptedString: TypedContractMethod<
    [],
    [CtStringStructOutput],
    "view"
  >;

  isEqual: TypedContractMethod<[], [boolean], "view">;

  plaintext: TypedContractMethod<[], [string], "view">;

  setIsEqual: TypedContractMethod<
    [a_: ItStringStruct, b_: ItStringStruct, useEq: boolean],
    [void],
    "nonpayable"
  >;

  setNetworkEncryptedString: TypedContractMethod<
    [it_: ItStringStruct],
    [void],
    "nonpayable"
  >;

  setPublicString: TypedContractMethod<[str: string], [void], "nonpayable">;

  setUserEncryptedString: TypedContractMethod<
    [it_: ItStringStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decryptNetworkEncryptedString"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getUserEncryptedString"
  ): TypedContractMethod<[], [CtStringStructOutput], "view">;
  getFunction(
    nameOrSignature: "isEqual"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "plaintext"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setIsEqual"
  ): TypedContractMethod<
    [a_: ItStringStruct, b_: ItStringStruct, useEq: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNetworkEncryptedString"
  ): TypedContractMethod<[it_: ItStringStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPublicString"
  ): TypedContractMethod<[str: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUserEncryptedString"
  ): TypedContractMethod<[it_: ItStringStruct], [void], "nonpayable">;

  filters: {};
}
