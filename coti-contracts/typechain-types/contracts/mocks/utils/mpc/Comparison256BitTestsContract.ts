/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface Comparison256BitTestsContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "boolResults"
      | "eqTest"
      | "geTest"
      | "gtTest"
      | "leTest"
      | "ltTest"
      | "maxTest"
      | "minTest"
      | "neTest"
      | "uintResults2"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "boolResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eqTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "geTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "gtTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "leTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ltTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "minTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "neTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "uintResults2",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "boolResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eqTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "geTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gtTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ltTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "neTest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uintResults2",
    data: BytesLike
  ): Result;
}

export interface Comparison256BitTestsContract extends BaseContract {
  connect(runner?: ContractRunner | null): Comparison256BitTestsContract;
  waitForDeployment(): Promise<this>;

  interface: Comparison256BitTestsContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  boolResults: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  eqTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  geTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  gtTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  leTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  ltTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  maxTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  minTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  neTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  uintResults2: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "boolResults"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "eqTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "geTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gtTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "leTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ltTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "neTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uintResults2"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  filters: {};
}
