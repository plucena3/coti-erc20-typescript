/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface Bitwise128BitTestsContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "andTest"
      | "numbers"
      | "orTest"
      | "shlTest"
      | "shrTest"
      | "xorTest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "andTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "numbers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "shlTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "shrTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "xorTest",
    values: [BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "andTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numbers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shlTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shrTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xorTest", data: BytesLike): Result;
}

export interface Bitwise128BitTestsContract extends BaseContract {
  connect(runner?: ContractRunner | null): Bitwise128BitTestsContract;
  waitForDeployment(): Promise<this>;

  interface: Bitwise128BitTestsContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  andTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  numbers: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  orTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  shlTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  shrTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  xorTest: TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "andTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "numbers"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "orTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shlTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shrTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xorTest"
  ): TypedContractMethod<
    [a: BigNumberish[], b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  filters: {};
}
